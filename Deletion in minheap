package crt;

public class MinHeapDeletion {
	static void heapify(int arr[], int n, int i) {
	    int smallest = i;  // Track smallest, not largest
	    int l = 2 * i + 1;
	    int r = 2 * i + 2;

	    if (l < n && arr[l] < arr[smallest])
	        smallest = l;

	    if (r < n && arr[r] < arr[smallest])
	        smallest = r;

	    if (smallest != i) {
	        int swap = arr[i];
	        arr[i] = arr[smallest];
	        arr[smallest] = swap;

	        heapify(arr, n, smallest);
	    }
	}


    // Function to delete the root from Heap
    static int deleteRoot(int arr[], int n)
    {
        // Get the last element
        int lastElement = arr[n - 1];

        // Replace root with first element
        arr[0] = lastElement;

        // Decrease size of heap by 1
        n = n - 1;

        // heapify the root node
        heapify(arr, n, 0);

        // return new size of Heap
        return n;
    }

    /* A utility function to print array of size N */
    static void printArray(int arr[], int n)
    {
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");

        System.out.println();
    }

    // Driver Code
    public static void main(String args[])
    {
        // Array representation of Max-Heap
        //     10
        //    /  \
        //   5    3  -- 5 -> 4,3,
        //  / \              |
        // 2   4             2
        int arr[] = { 10, 5, 3, 2, 4 };

        int n = arr.length;

        n = deleteRoot(arr, n);

        printArray(arr, n);
    }
}
