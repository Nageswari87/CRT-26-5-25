//DFS RECURSIVE

import java.util.*;

class Graph {
    private int V; // number of vertices
    private List<List<Integer>> adj; // adjacency list

    public Graph(int vertices) {
        V = vertices;
        adj = new ArrayList<>();
        for (int i = 0; i < V; i++)
            adj.add(new ArrayList<>());
    }

    // Add edge to the graph (undirected)
    public void addEdge(int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    // Recursive DFS function
    public void dfs(int node, boolean[] visited) {
        visited[node] = true;
        System.out.print(node + " ");

        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited);
            }
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6);

        // Add edges (undirected)
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.addEdge(4, 5);

        boolean[] visited = new boolean[6];

        System.out.println("DFS starting from node 0:");
        graph.dfs(0, visited);
    }
}
